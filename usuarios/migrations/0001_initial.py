# Generated by Django 5.1.5 on 2025-06-03 15:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoriaEvento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True)),
                ('album_facebook_id', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='CollageSession',
            fields=[
                ('session_id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'Activa'), ('completed', 'Completada'), ('canceled', 'Cancelada')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Sesión de Collage',
                'verbose_name_plural': 'Sesiones de Collage',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CollageTemplate',
            fields=[
                ('template_id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('background_color', models.CharField(default='#FFFFFF', max_length=20)),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='collage/backgrounds/')),
                ('background_size', models.CharField(default='cover', max_length=20)),
                ('background_position', models.CharField(default='center', max_length=20)),
                ('background_repeat', models.CharField(default='no-repeat', max_length=20)),
                ('template_data', models.TextField(help_text='Datos completos de la plantilla en formato JSON')),
                ('es_predeterminada', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Plantilla de Collage',
                'verbose_name_plural': 'Plantillas de Collage',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
            ],
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Invitado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=20)),
                ('telefono', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(3, 'El nombre debe ser de al menos 3 caracteres')], verbose_name='Nombre')),
                ('apellido', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(3, 'El apellido debe ser de al menos 3 caracteres')], verbose_name='Apellido')),
                ('cedula', models.CharField(db_index=True, max_length=20, unique=True, validators=[django.core.validators.MinLengthValidator(5, 'La cédula debe tener al menos 5 dígitos.')], verbose_name='Cédula')),
                ('fechaNacimiento', models.DateField(verbose_name='Fecha de Nacimiento')),
                ('direccion', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(5, 'La dirección debe tener al menos 5 caracteres.')], verbose_name='Dirección')),
                ('telefono', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="El número de teléfono debe estar en formato: '+999999999'. Hasta 15 dígitos permitidos.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Teléfono')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Actualización')),
                ('activo', models.BooleanField(default=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('usuario', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cliente', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
                'ordering': ['apellido', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='CollageResult',
            fields=[
                ('collage_id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='collage/results/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('print_count', models.IntegerField(default=0)),
                ('share_count', models.IntegerField(default=0)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='usuarios.collagesession')),
            ],
            options={
                'verbose_name': 'Resultado de Collage',
                'verbose_name_plural': 'Resultados de Collage',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='collagesession',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='usuarios.collagetemplate'),
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre del evento')),
                ('fecha_hora', models.DateTimeField(verbose_name='Fecha y hora del evento')),
                ('servicios', multiselectfield.db.fields.MultiSelectField(choices=[('photobook', 'Photobook'), ('foto_tradicional', 'Foto tradicional'), ('video', 'Video'), ('cabina_360', 'Cabina 360'), ('cabina_fotos', 'Cabina fotos'), ('drone', 'Drone'), ('clip_inicio', 'Clip de inicio')], max_length=100, verbose_name='Servicios')),
                ('direccion', models.CharField(max_length=255, verbose_name='Dirección del evento')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Actualización')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('categoria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='usuarios.categoriaevento', verbose_name='Categoría')),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eventos', to='usuarios.cliente', verbose_name='Cliente')),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
                'ordering': ['-fecha_hora'],
            },
        ),
        migrations.CreateModel(
            name='Configurar_Photobooth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mensaje_bienvenida', models.CharField(default='¡Bienvenidos a nuestro photobooth!', max_length=255)),
                ('imagen_fondo', models.ImageField(blank=True, null=True, upload_to='photobooth/fondos/')),
                ('color_texto', models.CharField(default='#000000', max_length=7)),
                ('tamano_texto', models.IntegerField(default=24)),
                ('tipo_letra', models.CharField(default='Arial', max_length=50)),
                ('activo', models.BooleanField(default=True)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('camera_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='ID de cámara seleccionada')),
                ('resolucion_camara', models.CharField(choices=[('640x480', '640x480 (VGA)'), ('1280x720', '1280x720 (HD)'), ('1920x1080', '1920x1080 (Full HD)'), ('3840x2160', '3840x2160 (4K)')], default='1280x720', max_length=20, verbose_name='Resolución de cámara')),
                ('balance_blancos', models.CharField(choices=[('auto', 'Automático'), ('cloudy', 'Nublado'), ('sunny', 'Soleado'), ('fluorescent', 'Fluorescente'), ('incandescent', 'Incandescente')], default='auto', max_length=20, verbose_name='Balance de blancos')),
                ('max_fotos', models.IntegerField(choices=[(1, '1 foto'), (2, '2 fotos'), (4, '4 fotos'), (5, '5 fotos')], default=4)),
                ('permitir_personalizar', models.BooleanField(default=True, help_text='Permitir a los usuarios mover y redimensionar fotos')),
                ('evento', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='config_photobooth', to='usuarios.evento')),
            ],
        ),
        migrations.AddField(
            model_name='collagetemplate',
            name='evento',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collage_templates', to='usuarios.evento'),
        ),
        migrations.AddField(
            model_name='collagesession',
            name='evento',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collage_sessions', to='usuarios.evento'),
        ),
        migrations.CreateModel(
            name='Fotografia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(upload_to='imagenes/')),
                ('descripcion', models.TextField(max_length=34, validators=[django.core.validators.MinLengthValidator(5, 'La descripción debe tener al menos 5 caracteres.')])),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fotografias', to='usuarios.evento')),
                ('invitados', models.ManyToManyField(null=True, related_name='fotografias', to='usuarios.invitado')),
            ],
        ),
        migrations.CreateModel(
            name='PhotoboothConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mensaje_bienvenida', models.CharField(default='¡Bienvenidos al photobooth!', max_length=200)),
                ('imagen_fondo', models.ImageField(blank=True, null=True, upload_to='photobooth/fondos/')),
                ('color_texto', models.CharField(default='#000000', max_length=20)),
                ('tamano_texto', models.IntegerField(default=24)),
                ('tipo_letra', models.CharField(default='Arial', max_length=50)),
                ('permitir_personalizar', models.BooleanField(default=False)),
                ('tiempo_entre_fotos', models.IntegerField(default=3, help_text='Intervalo de tiempo entre cada foto durante la sesión', validators=[django.core.validators.MinValueValidator(1, message='El tiempo mínimo entre fotos es 1 segundo'), django.core.validators.MaxValueValidator(20, message='El tiempo máximo entre fotos es 20 segundos')], verbose_name='Tiempo entre fotos (segundos)')),
                ('tiempo_cuenta_regresiva', models.IntegerField(default=3, help_text='Cuenta regresiva antes de tomar cada foto', validators=[django.core.validators.MinValueValidator(1, message='La cuenta regresiva mínima es 1 segundo'), django.core.validators.MaxValueValidator(10, message='La cuenta regresiva máxima es 10 segundos')], verbose_name='Tiempo de cuenta regresiva')),
                ('camera_id', models.CharField(blank=True, help_text='Identificador de la cámara web a utilizar', max_length=255, null=True, verbose_name='ID de cámara seleccionada')),
                ('resolucion_camara', models.CharField(choices=[('640x480', '640x480 (VGA)'), ('1280x720', '1280x720 (HD)'), ('1920x1080', '1920x1080 (Full HD)'), ('3840x2160', '3840x2160 (4K)')], default='1280x720', help_text='Resolución para capturar las fotos', max_length=20, verbose_name='Resolución de cámara')),
                ('balance_blancos', models.CharField(choices=[('auto', 'Automático'), ('cloudy', 'Nublado'), ('sunny', 'Soleado'), ('fluorescent', 'Fluorescente'), ('incandescent', 'Incandescente')], default='auto', help_text='Ajuste del balance de blancos de la cámara', max_length=20, verbose_name='Balance de blancos')),
                ('iso_valor', models.IntegerField(default=100, help_text='Sensibilidad ISO de la cámara', validators=[django.core.validators.MinValueValidator(100, message='El ISO mínimo es 100'), django.core.validators.MaxValueValidator(3200, message='El ISO máximo es 3200')], verbose_name='Valor ISO')),
                ('printer_name', models.CharField(blank=True, help_text='Nombre de la impresora a utilizar para imprimir los collages', max_length=255, null=True, verbose_name='Impresora seleccionada')),
                ('paper_size', models.CharField(choices=[('10x15', '10x15 cm (4x6 pulgadas)'), ('13x18', '13x18 cm (5x7 pulgadas)'), ('15x20', '15x20 cm (6x8 pulgadas)'), ('20x25', '20x25 cm (8x10 pulgadas)'), ('A4', 'A4 (21x29.7 cm)'), ('Letter', 'Letter (8.5x11 pulgadas)')], default='10x15', help_text='Tamaño del papel para impresión de collages', max_length=50, verbose_name='Tamaño de papel')),
                ('copias_impresion', models.IntegerField(default=1, help_text='Número de copias a imprimir por defecto', validators=[django.core.validators.MinValueValidator(1, message='Debe imprimir al menos 1 copia'), django.core.validators.MaxValueValidator(10, message='Máximo 10 copias por impresión')], verbose_name='Copias a imprimir')),
                ('calidad_impresion', models.CharField(choices=[('draft', 'Borrador'), ('normal', 'Normal'), ('high', 'Alta'), ('best', 'Máxima')], default='high', help_text='Calidad de impresión para los collages', max_length=20, verbose_name='Calidad de impresión')),
                ('imprimir_automaticamente', models.BooleanField(default=False, help_text='Si está activado, imprime automáticamente al finalizar el collage', verbose_name='Imprimir automáticamente')),
                ('tiempo_visualizacion_foto', models.IntegerField(default=2, help_text='Tiempo que se muestra cada foto antes de continuar', validators=[django.core.validators.MinValueValidator(1, message='El tiempo mínimo de visualización es 1 segundo'), django.core.validators.MaxValueValidator(10, message='El tiempo máximo de visualización es 10 segundos')], verbose_name='Tiempo de visualización de foto')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el photobooth está activo para este evento', verbose_name='Photobooth activo')),
                ('total_sesiones', models.IntegerField(default=0, help_text='Número total de sesiones completadas', verbose_name='Total de sesiones')),
                ('total_fotos', models.IntegerField(default=0, help_text='Número total de fotos tomadas', verbose_name='Total de fotos')),
                ('total_impresiones', models.IntegerField(default=0, help_text='Número total de collages impresos', verbose_name='Total de impresiones')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('evento', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='photobooth_config', to='usuarios.evento')),
                ('plantilla_collage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='photobooth_configs', to='usuarios.collagetemplate')),
            ],
            options={
                'verbose_name': 'Configuración de Photobooth',
                'verbose_name_plural': 'Configuraciones de Photobooth',
            },
        ),
        migrations.CreateModel(
            name='SessionPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frame_index', models.IntegerField(help_text='Índice del marco en la plantilla')),
                ('image', models.ImageField(upload_to='collage/session_photos/')),
                ('taken_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='usuarios.collagesession')),
            ],
            options={
                'verbose_name': 'Foto de Sesión',
                'verbose_name_plural': 'Fotos de Sesión',
                'ordering': ['session', 'frame_index'],
            },
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['cedula'], name='usuarios_cl_cedula_f55efd_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='usuarios_cl_search__108e6a_gin'),
        ),
        migrations.AddIndex(
            model_name='evento',
            index=models.Index(fields=['fecha_hora'], name='usuarios_ev_fecha_h_e4dd0a_idx'),
        ),
        migrations.AddIndex(
            model_name='evento',
            index=models.Index(fields=['cliente'], name='usuarios_ev_cliente_4edfc3_idx'),
        ),
        migrations.AddIndex(
            model_name='evento',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='usuarios_ev_search__de3133_gin'),
        ),
        migrations.AlterUniqueTogether(
            name='sessionphoto',
            unique_together={('session', 'frame_index')},
        ),
    ]
