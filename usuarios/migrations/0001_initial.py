# Generated by Django 5.1.5 on 2025-03-09 03:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Invitado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=20)),
                ('telefono', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del cliente', max_length=100, verbose_name='Nombre')),
                ('apellido', models.CharField(help_text='Apellido del cliente', max_length=100, verbose_name='Apellido')),
                ('cedula', models.CharField(db_index=True, help_text='Número de cédula o documento de identidad', max_length=20, unique=True, verbose_name='Cédula')),
                ('fechaNacimiento', models.DateField(help_text='Fecha de nacimiento del cliente', verbose_name='Fecha de Nacimiento')),
                ('direccion', models.CharField(help_text='Dirección completa del cliente', max_length=255, verbose_name='Dirección')),
                ('correo', models.EmailField(db_index=True, help_text='Correo electrónico del cliente', max_length=254, unique=True, verbose_name='Correo Electrónico')),
                ('telefono', models.CharField(help_text='Número de teléfono del cliente', max_length=17, validators=[django.core.validators.RegexValidator(message="El número de teléfono debe estar en formato: '+999999999'. Hasta 15 dígitos permitidos.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Teléfono')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Actualización')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('usuario', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cliente', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
                'ordering': ['apellido', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre o título del evento', max_length=100, verbose_name='Nombre del evento')),
                ('fecha_hora', models.DateTimeField(help_text='Fecha y hora programada para el evento', verbose_name='Fecha y hora del evento')),
                ('servicios', multiselectfield.db.fields.MultiSelectField(choices=[('photobook', 'Photobook'), ('foto_tradicional', 'Foto tradicional'), ('video', 'Video'), ('cabina_360', 'Cabina 360'), ('cabina_fotos', 'Cabina fotos'), ('drone', 'Drone'), ('clip_inicio', 'Clip de inicio')], help_text='Servicios contratados para el evento', max_length=100, verbose_name='Servicios')),
                ('direccion', models.CharField(help_text='Dirección completa donde se realizará el evento', max_length=255, verbose_name='Dirección del evento')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Actualización')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('cliente', models.ForeignKey(help_text='Cliente asociado al evento', on_delete=django.db.models.deletion.CASCADE, related_name='eventos', to='usuarios.cliente', verbose_name='Cliente')),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
                'ordering': ['-fecha_hora'],
            },
        ),
        migrations.CreateModel(
            name='Fotografia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(blank=True, null=True, upload_to='imagenes/')),
                ('descripcion', models.TextField()),
                ('evento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fotografias', to='usuarios.evento')),
                ('invitado', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fotografias', to='usuarios.invitado')),
            ],
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['cedula'], name='usuarios_cl_cedula_f55efd_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['correo'], name='usuarios_cl_correo_179f36_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='usuarios_cl_search__108e6a_gin'),
        ),
        migrations.AddIndex(
            model_name='evento',
            index=models.Index(fields=['fecha_hora'], name='usuarios_ev_fecha_h_e4dd0a_idx'),
        ),
        migrations.AddIndex(
            model_name='evento',
            index=models.Index(fields=['cliente'], name='usuarios_ev_cliente_4edfc3_idx'),
        ),
        migrations.AddIndex(
            model_name='evento',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='usuarios_ev_search__de3133_gin'),
        ),
    ]
