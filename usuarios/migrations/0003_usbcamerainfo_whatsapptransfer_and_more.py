# Generated by Django 5.1.5 on 2025-06-06 02:18

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("usuarios", "0002_remove_fotografia_invitado_fotografia_invitados"),
    ]

    operations = [
        migrations.CreateModel(
            name="USBCameraInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vendor_id",
                    models.CharField(max_length=10, verbose_name="Vendor ID"),
                ),
                (
                    "product_id",
                    models.CharField(max_length=10, verbose_name="Product ID"),
                ),
                (
                    "vendor_name",
                    models.CharField(max_length=100, verbose_name="Fabricante"),
                ),
                (
                    "product_name",
                    models.CharField(max_length=100, verbose_name="Modelo"),
                ),
                (
                    "serial_number",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Número de serie",
                    ),
                ),
                (
                    "supports_ptp",
                    models.BooleanField(default=False, verbose_name="Soporta PTP"),
                ),
                (
                    "supports_liveview",
                    models.BooleanField(default=False, verbose_name="Soporta LiveView"),
                ),
                (
                    "supports_remote_capture",
                    models.BooleanField(
                        default=False, verbose_name="Soporta captura remota"
                    ),
                ),
                (
                    "supported_iso_values",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Valores ISO soportados"
                    ),
                ),
                (
                    "supported_apertures",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Aperturas soportadas"
                    ),
                ),
                (
                    "supported_shutter_speeds",
                    models.JSONField(
                        blank=True,
                        default=list,
                        verbose_name="Velocidades de obturación soportadas",
                    ),
                ),
                (
                    "first_detected",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Primera detección"
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Última vez vista"
                    ),
                ),
                (
                    "times_connected",
                    models.IntegerField(default=0, verbose_name="Veces conectada"),
                ),
            ],
            options={
                "verbose_name": "Información de Cámara USB",
                "verbose_name_plural": "Información de Cámaras USB",
            },
        ),
        migrations.CreateModel(
            name="WhatsAppTransfer",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "phone_number",
                    models.CharField(
                        help_text="Número de WhatsApp del usuario",
                        max_length=20,
                        verbose_name="Número de teléfono",
                    ),
                ),
                (
                    "user_name",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Nombre del usuario",
                    ),
                ),
                (
                    "user_email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="Email del usuario",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("sent_to_device", "Enviado al dispositivo"),
                            ("data_collected", "Datos recopilados"),
                            ("whatsapp_sent", "Enviado por WhatsApp"),
                            ("completed", "Completado"),
                            ("failed", "Fallido"),
                            ("cancelled", "Cancelado"),
                        ],
                        default="sent_to_device",
                        max_length=20,
                        verbose_name="Estado de la transferencia",
                    ),
                ),
                (
                    "transfer_timestamp",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Momento de la transferencia"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Completado en"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Información adicional sobre la transferencia",
                        verbose_name="Metadatos adicionales",
                    ),
                ),
                (
                    "device_model",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Modelo del dispositivo",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="ID del dispositivo",
                    ),
                ),
                (
                    "custom_message",
                    models.TextField(
                        blank=True,
                        help_text="Mensaje personalizado enviado con el collage",
                        null=True,
                        verbose_name="Mensaje personalizado",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, null=True, verbose_name="Mensaje de error"
                    ),
                ),
                (
                    "retry_count",
                    models.IntegerField(default=0, verbose_name="Intentos de reenvío"),
                ),
            ],
            options={
                "verbose_name": "Transferencia de WhatsApp",
                "verbose_name_plural": "Transferencias de WhatsApp",
                "ordering": ["-transfer_timestamp"],
            },
        ),
        migrations.RemoveIndex(
            model_name="cliente",
            name="usuarios_cl_correo_179f36_idx",
        ),
        migrations.RemoveField(
            model_name="cliente",
            name="correo",
        ),
        migrations.RemoveField(
            model_name="configurar_photobooth",
            name="balance_blancos",
        ),
        migrations.RemoveField(
            model_name="photoboothconfig",
            name="balance_blancos",
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="apertura",
            field=models.CharField(
                blank=True,
                default="f/5.6",
                help_text="Ej: f/2.8, f/4, f/5.6",
                max_length=10,
                null=True,
                verbose_name="Apertura (f-stop)",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="calidad_imagen",
            field=models.CharField(
                choices=[
                    ("RAW", "RAW (NEF)"),
                    ("JPEG_FINE", "JPEG Fine"),
                    ("JPEG_NORMAL", "JPEG Normal"),
                    ("RAW_JPEG", "RAW + JPEG"),
                ],
                default="JPEG_FINE",
                max_length=20,
                verbose_name="Calidad de imagen",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="modo_disparo",
            field=models.CharField(
                blank=True,
                choices=[
                    ("M", "Manual"),
                    ("A", "Prioridad de Apertura"),
                    ("S", "Prioridad de Obturación"),
                    ("P", "Programa"),
                ],
                default="M",
                max_length=20,
                null=True,
                verbose_name="Modo de disparo",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="modo_enfoque",
            field=models.CharField(
                choices=[
                    ("AF-S", "AF Simple (AF-S)"),
                    ("AF-C", "AF Continuo (AF-C)"),
                    ("MF", "Manual (MF)"),
                ],
                default="AF-S",
                max_length=20,
                verbose_name="Modo de enfoque",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="nikon_camera_model",
            field=models.CharField(
                blank=True,
                help_text="Modelo detectado automáticamente",
                max_length=100,
                null=True,
                verbose_name="Modelo de cámara Nikon",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="nivel_iluminacion",
            field=models.IntegerField(
                default=50,
                help_text="Ajuste de brillo/iluminación de 0 a 100",
                validators=[
                    django.core.validators.MinValueValidator(
                        0, message="El nivel mínimo de iluminación es 0"
                    ),
                    django.core.validators.MaxValueValidator(
                        100, message="El nivel máximo de iluminación es 100"
                    ),
                ],
                verbose_name="Nivel de iluminación (%)",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="qdslr_server_port",
            field=models.IntegerField(
                default=4757,
                help_text="Puerto donde corre el servidor (default: 4757)",
                verbose_name="Puerto del servidor qDslrDashboard",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="tipo_camara",
            field=models.CharField(
                choices=[
                    ("webcam", "Cámara Web"),
                    ("nikon_dslr", "Nikon DSLR/Mirrorless"),
                    ("usb_ptp", "Cámara USB (PTP)"),
                    ("canon_dslr", "Canon DSLR"),
                    ("sony_camera", "Sony Camera"),
                    ("windows_camera", "Cámara Windows (WIA/PTP)"),
                ],
                default="webcam",
                help_text="Tipo de cámara a utilizar",
                max_length=20,
                verbose_name="Tipo de cámara",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_auto_download",
            field=models.BooleanField(
                default=True,
                help_text="Descargar automáticamente las fotos después de capturar",
                verbose_name="Descarga automática",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_capture_timeout",
            field=models.IntegerField(
                default=30,
                help_text="Tiempo máximo para completar una captura",
                verbose_name="Timeout de captura (segundos)",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_connection_status",
            field=models.CharField(
                choices=[
                    ("disconnected", "Desconectada"),
                    ("connecting", "Conectando"),
                    ("connected", "Conectada"),
                    ("error", "Error"),
                ],
                default="disconnected",
                max_length=20,
                verbose_name="Estado de conexión USB",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_connection_timeout",
            field=models.IntegerField(
                default=10,
                help_text="Tiempo máximo para establecer conexión USB",
                verbose_name="Timeout de conexión (segundos)",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_delete_after_download",
            field=models.BooleanField(
                default=False,
                help_text="Eliminar fotos de la cámara después de descargarlas",
                verbose_name="Eliminar después de descargar",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_last_connected",
            field=models.DateTimeField(
                blank=True, null=True, verbose_name="Última conexión USB"
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_last_error",
            field=models.TextField(
                blank=True, null=True, verbose_name="Último error USB"
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_product_id",
            field=models.CharField(
                blank=True,
                help_text="ID del producto USB específico",
                max_length=10,
                null=True,
                verbose_name="USB Product ID",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_serial_number",
            field=models.CharField(
                blank=True,
                help_text="Número de serie de la cámara USB conectada",
                max_length=100,
                null=True,
                verbose_name="Número de serie USB",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_session_id",
            field=models.CharField(
                blank=True,
                help_text="Identificador único de la sesión USB activa",
                max_length=36,
                null=True,
                verbose_name="ID de sesión USB",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_total_captures",
            field=models.IntegerField(
                default=0,
                help_text="Contador de fotos capturadas vía USB",
                verbose_name="Total capturas USB",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_use_raw_mode",
            field=models.BooleanField(
                default=False,
                help_text="Capturar en formato RAW si está disponible",
                verbose_name="Usar modo RAW",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="usb_vendor_id",
            field=models.CharField(
                blank=True,
                help_text="ID del fabricante USB (ej: 04b0 para Nikon)",
                max_length=10,
                null=True,
                verbose_name="USB Vendor ID",
            ),
        ),
        migrations.AddField(
            model_name="photoboothconfig",
            name="velocidad_obturacion",
            field=models.CharField(
                blank=True,
                default="1/125",
                help_text="Ej: 1/125, 1/60, 1/30",
                max_length=20,
                null=True,
                verbose_name="Velocidad de obturación",
            ),
        ),
        migrations.AlterField(
            model_name="cliente",
            name="apellido",
            field=models.CharField(
                max_length=50,
                validators=[
                    django.core.validators.MinLengthValidator(
                        3, "El apellido debe ser de al menos 3 caracteres"
                    )
                ],
                verbose_name="Apellido",
            ),
        ),
        migrations.AlterField(
            model_name="cliente",
            name="cedula",
            field=models.CharField(
                db_index=True,
                max_length=20,
                unique=True,
                validators=[
                    django.core.validators.MinLengthValidator(
                        5, "La cédula debe tener al menos 5 dígitos."
                    )
                ],
                verbose_name="Cédula",
            ),
        ),
        migrations.AlterField(
            model_name="cliente",
            name="direccion",
            field=models.CharField(
                max_length=50,
                validators=[
                    django.core.validators.MinLengthValidator(
                        5, "La dirección debe tener al menos 5 caracteres."
                    )
                ],
                verbose_name="Dirección",
            ),
        ),
        migrations.AlterField(
            model_name="cliente",
            name="nombre",
            field=models.CharField(
                max_length=50,
                validators=[
                    django.core.validators.MinLengthValidator(
                        3, "El nombre debe ser de al menos 3 caracteres"
                    )
                ],
                verbose_name="Nombre",
            ),
        ),
        migrations.AlterField(
            model_name="fotografia",
            name="descripcion",
            field=models.TextField(
                max_length=34,
                validators=[
                    django.core.validators.MinLengthValidator(
                        5, "La descripción debe tener al menos 5 caracteres."
                    )
                ],
            ),
        ),
        migrations.AlterUniqueTogether(
            name="usbcamerainfo",
            unique_together={("vendor_id", "product_id", "serial_number")},
        ),
        migrations.AddField(
            model_name="whatsapptransfer",
            name="collage_result",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="whatsapp_transfers",
                to="usuarios.collageresult",
            ),
        ),
        migrations.AddField(
            model_name="whatsapptransfer",
            name="session",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="whatsapp_transfers",
                to="usuarios.collagesession",
            ),
        ),
        migrations.AddIndex(
            model_name="whatsapptransfer",
            index=models.Index(fields=["status"], name="usuarios_wh_status_0696bb_idx"),
        ),
        migrations.AddIndex(
            model_name="whatsapptransfer",
            index=models.Index(
                fields=["transfer_timestamp"], name="usuarios_wh_transfe_a69831_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="whatsapptransfer",
            index=models.Index(
                fields=["session"], name="usuarios_wh_session_eedf4b_idx"
            ),
        ),
    ]
