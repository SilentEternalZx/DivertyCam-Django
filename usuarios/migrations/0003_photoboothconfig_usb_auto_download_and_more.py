# Generated by Django 5.1.6 on 2025-06-03 04:52

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('usuarios', '0002_remove_configurar_photobooth_balance_blancos_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_auto_download',
            field=models.BooleanField(default=True, help_text='Descargar automáticamente las fotos después de capturar', verbose_name='Descarga automática'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_capture_timeout',
            field=models.IntegerField(default=30, help_text='Tiempo máximo para completar una captura', verbose_name='Timeout de captura (segundos)'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_connection_status',
            field=models.CharField(choices=[('disconnected', 'Desconectada'), ('connecting', 'Conectando'), ('connected', 'Conectada'), ('error', 'Error')], default='disconnected', max_length=20, verbose_name='Estado de conexión USB'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_connection_timeout',
            field=models.IntegerField(default=10, help_text='Tiempo máximo para establecer conexión USB', verbose_name='Timeout de conexión (segundos)'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_delete_after_download',
            field=models.BooleanField(default=False, help_text='Eliminar fotos de la cámara después de descargarlas', verbose_name='Eliminar después de descargar'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_last_connected',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Última conexión USB'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_last_error',
            field=models.TextField(blank=True, null=True, verbose_name='Último error USB'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_product_id',
            field=models.CharField(blank=True, help_text='ID del producto USB específico', max_length=10, null=True, verbose_name='USB Product ID'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_serial_number',
            field=models.CharField(blank=True, help_text='Número de serie de la cámara USB conectada', max_length=100, null=True, verbose_name='Número de serie USB'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_session_id',
            field=models.CharField(blank=True, help_text='Identificador único de la sesión USB activa', max_length=36, null=True, verbose_name='ID de sesión USB'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_total_captures',
            field=models.IntegerField(default=0, help_text='Contador de fotos capturadas vía USB', verbose_name='Total capturas USB'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_use_raw_mode',
            field=models.BooleanField(default=False, help_text='Capturar en formato RAW si está disponible', verbose_name='Usar modo RAW'),
        ),
        migrations.AddField(
            model_name='photoboothconfig',
            name='usb_vendor_id',
            field=models.CharField(blank=True, help_text='ID del fabricante USB (ej: 04b0 para Nikon)', max_length=10, null=True, verbose_name='USB Vendor ID'),
        ),
        migrations.AlterField(
            model_name='photoboothconfig',
            name='tipo_camara',
            field=models.CharField(choices=[('webcam', 'Cámara Web'), ('nikon_dslr', 'Nikon DSLR/Mirrorless'), ('usb_ptp', 'Cámara USB (PTP)'), ('canon_dslr', 'Canon DSLR'), ('sony_camera', 'Sony Camera')], default='webcam', help_text='Tipo de cámara a utilizar', max_length=20, verbose_name='Tipo de cámara'),
        ),
        migrations.CreateModel(
            name='USBCameraInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_id', models.CharField(max_length=10, verbose_name='Vendor ID')),
                ('product_id', models.CharField(max_length=10, verbose_name='Product ID')),
                ('vendor_name', models.CharField(max_length=100, verbose_name='Fabricante')),
                ('product_name', models.CharField(max_length=100, verbose_name='Modelo')),
                ('serial_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Número de serie')),
                ('supports_ptp', models.BooleanField(default=False, verbose_name='Soporta PTP')),
                ('supports_liveview', models.BooleanField(default=False, verbose_name='Soporta LiveView')),
                ('supports_remote_capture', models.BooleanField(default=False, verbose_name='Soporta captura remota')),
                ('supported_iso_values', models.JSONField(blank=True, default=list, verbose_name='Valores ISO soportados')),
                ('supported_apertures', models.JSONField(blank=True, default=list, verbose_name='Aperturas soportadas')),
                ('supported_shutter_speeds', models.JSONField(blank=True, default=list, verbose_name='Velocidades de obturación soportadas')),
                ('first_detected', models.DateTimeField(auto_now_add=True, verbose_name='Primera detección')),
                ('last_seen', models.DateTimeField(auto_now=True, verbose_name='Última vez vista')),
                ('times_connected', models.IntegerField(default=0, verbose_name='Veces conectada')),
            ],
            options={
                'verbose_name': 'Información de Cámara USB',
                'verbose_name_plural': 'Información de Cámaras USB',
                'unique_together': {('vendor_id', 'product_id', 'serial_number')},
            },
        ),
    ]
